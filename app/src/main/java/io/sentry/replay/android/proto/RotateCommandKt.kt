// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: replay.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.sentry.replay.android.proto;

@kotlin.jvm.JvmName("-initializerotateCommand")
public inline fun rotateCommand(block: io.sentry.replay.android.proto.RotateCommandKt.Dsl.() -> kotlin.Unit): io.sentry.replay.android.proto.ReplayOuterClass.RotateCommand =
  io.sentry.replay.android.proto.RotateCommandKt.Dsl._create(io.sentry.replay.android.proto.ReplayOuterClass.RotateCommand.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `io.sentry.replay.android.proto.RotateCommand`
 */
public object RotateCommandKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.sentry.replay.android.proto.ReplayOuterClass.RotateCommand.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.sentry.replay.android.proto.ReplayOuterClass.RotateCommand.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.sentry.replay.android.proto.ReplayOuterClass.RotateCommand = _builder.build()

    /**
     * `float degrees = 1;`
     */
    public var degrees: kotlin.Float
      @JvmName("getDegrees")
      get() = _builder.getDegrees()
      @JvmName("setDegrees")
      set(value) {
        _builder.setDegrees(value)
      }
    /**
     * `float degrees = 1;`
     */
    public fun clearDegrees() {
      _builder.clearDegrees()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun io.sentry.replay.android.proto.ReplayOuterClass.RotateCommand.copy(block: io.sentry.replay.android.proto.RotateCommandKt.Dsl.() -> kotlin.Unit): io.sentry.replay.android.proto.ReplayOuterClass.RotateCommand =
  io.sentry.replay.android.proto.RotateCommandKt.Dsl._create(this.toBuilder()).apply { block() }._build()

